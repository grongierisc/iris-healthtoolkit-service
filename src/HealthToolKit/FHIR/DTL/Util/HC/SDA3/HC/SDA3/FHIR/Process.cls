Include (HS.HC, HS.FHIRServer)

/// This business process takes an SDA3 stream as input, enclosed in either an Ens.StreamContainer
/// message or in an HS.Message.XMLMessage message. It transforms the SDA3 into a FHIR Bundle, using
/// the SDA3 to FHIR transformation API class. The version of FHIR to output is determined by the
/// "FHIRMetadataSet" setting on this business process. If TransmissionMode is "transaction",
/// then the Bundle is added to a FHIR request message and forwarded to the business host indicated
/// by Target Config Name. Otherwise, if TransmissionMode is "individual", then the individual
/// resources within the Bundle are each added to separate FHIR request messages and forwarded to
/// Target Config Name.
Class HealthToolKit.FHIR.DTL.Util.HC.SDA3.FHIR.Process Extends (Ens.BusinessProcess, HS.HC.Util.Trace.Helper) [ ClassType = persistent, Inheritance = right ]
{

Parameter HSDEPLOY = 1;

Parameter SETTINGS = "TargetConfigName:Basic:selector?context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId},-FHIRVersion,TransmissionMode,FullTransactionResponse,FHIRFormat,FormatFHIROutput,CallbackClass,-ValidResourceRequired,OutputToQuickStream,TransformClass::selector?context={HS.HC.Util.ContextSearch/SubclassOf?class=HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR},FHIRMetadataSet::selector?context={HS.FHIRServer.Util.ContextSearch/FHIRMetadataSets},FHIREndpoint::selector?context={HS.FHIRServer.Util.ContextSearch/FHIRServerEndpoints}";

/// Business host to which to forward the FHIR request message that is generated by this business process.
Property TargetConfigName As Ens.DataType.ConfigName;

/// THIS SETTING IS UNUSED AS OF 2020.2 - FHIR version key of FHIR output. Examples: "STU3", "R4".<br>
/// FHIRMetadataSet must be configured.
Property FHIRVersion As %String(MAXLEN = 128) [ Deprecated ];

/// transaction = Send all generated FHIR resources in a single transaction interaction in a Bundle of type "transaction".<br>
/// individual = Send each generated FHIR resource in its own individual create or update interaction.
Property TransmissionMode As %String(DISPLAYLIST = ",transaction,individual", VALUELIST = ",transaction,individual") [ InitialExpression = "transaction" ];

/// If checked, the FHIR request message that this process sends to the target
/// config will be created with a "PREFER" header value set to 
/// "return=representation". Per the FHIR spec, this header indicates to a FHIR
/// server that every created or updated resource should be returned in its
/// entirety as it is saved (ie, with any modifications applied by the server).
/// Whether the server actually does this depends on the server.<br>
/// <br>
/// This setting should be left unchecked except during debugging, as requesting
/// this information will increase response time from the target config.
Property FullTransactionResponse As %Boolean [ InitialExpression = 0 ];

/// The FHIR format to use for FHIR request message payload.
Property FHIRFormat As %String(DISPLAYLIST = ",JSON,XML", VALUELIST = ",JSON,XML") [ InitialExpression = "JSON" ];

/// If checked, causes any created FHIR payload to include indent and line end
/// formatting characters to enhance the readability of the raw content.<br>
/// <br>
/// This setting should be left unchecked except during debugging, as requesting
/// this option will increase the time taken to generate the FHIR output.
Property FormatFHIROutput As %Boolean [ InitialExpression = 0 ];

/// THIS SETTING IS UNUSED AS OF 2020.2 - It is retained to provide user visibility for reference during conversion of existing code customizations.<br>
/// <br>
/// (LEGACY COMMENT) Class to use for the callback object that is invoked during the DTL transformation
/// process. If this setting is left blank, at run-time it is defaulted to
/// "HS.FHIR.DTL.Util.API.HC.Callback.Default.SDA3To"+FHIRVersion. FHIRVersion is
/// to be derived from the FHIRVersion setting on this business host.
Property CallbackClass As %String(MAXLEN = 256);

/// THIS PROPERTY IS UNUSED AND REMOVED AS A SETTING AS OF 2020.2 - If checked, then the FHIR that is generated by the SDA3 to FHIR DTL transformation
/// must be valid FHIR. If it fails validation, then it will not be forwarded.
/// Regardless of the value of this setting, validation failures will be logged in
/// the Event Log as alert messages.
Property ValidResourceRequired As %Boolean [ InitialExpression = 1 ];

/// As of 2020.2, this setting is applicable only when Target Config Name points to a
/// config item that is NOT a FHIRServer Interop business operation. When sending to a
/// FHIRServer Interop operation, the generated request message is always placed in a
/// QuickStream. To see the contents of the QuickStream in an Interoperability
/// message trace, add HS.Util.TraceOperations to your production and set the
///  TraceOperations setting of this business process to FULL beforehand.<br>
/// <br>
/// When sending to non-FHIRServer Interop operation:<br>
/// <br>
/// The output of this business process is a FHIR request message.<br>
/// <br>
/// If OutputToQuickStream is not checked, the FHIR output of the transformation
/// will be placed in the request message Payload property.<br>
/// <br>
/// If this setting is checked, the FHIR output will be placed in an
/// HS.SDA3.QuickStream, and the QuickStreamId property of the request message
/// will be set to the id of that QuickStream.
Property OutputToQuickStream As %Boolean [ InitialExpression = 0 ];

/// SDA3 to FHIR transformation API class. Must be or extend HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR.
/// This business process only calls method TransformStream() in the API class.
Property TransformClass As %Dictionary.Classname [ InitialExpression = "HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR" ];

/// FHIR Metadata Set. These are defined in HS_FHIRServer.FHIRMetadataSet.
Property FHIRMetadataSet As %String(MAXLEN = 256);

/// FHIRServer Service endpoint to use when sending the FHIR request message to a FHIRServer Interop host.<br><br>
/// Not applicable when sending to a FHIRServer HTTP Interop host.
Property FHIREndpoint As %String(MAXLEN = 512);

Method OnRequest(
	pRequest As Ens.Request,
	Output pResponse As Ens.Response) As %Status
{
	Set tSC = $$$OK
	
	Try {
		Set tQuickStreamId = ""
		
		If pRequest.%IsA("Ens.StreamContainer") {
			//Set pResponse = ##class(Ens.StreamContainer).%New()
			Set tApplication = ""
			Set tSessionId = ""
			Set tPatientResourceId = ""
			Set tQuickStreamId = pRequest.Attributes.GetAt("QuickStreamId")
			If tQuickStreamId'="" {
				Set tQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(tQuickStreamId)
				Set tSDA3StreamRef = tQuickStream
			} Else {
				Set tSDA3StreamRef = pRequest.Stream
			}
			Set tSC = ..ProcessSDARequest(tSDA3StreamRef, tApplication, tSessionId, tPatientResourceId,.pResponse)
		} ElseIf pRequest.%IsA("HS.Message.XMLMessage") {
			Set pResponse = ##class(HS.Message.XMLMessage).%New()
			Set tApplication = pRequest.AdditionalInfo.GetAt("SessionApplication")
			Set tSessionId = pRequest.AdditionalInfo.GetAt("SessionId")
			Set tPatientResourceId = pRequest.AdditionalInfo.GetAt("PatientResourceId")
			Set tQuickStreamId = pRequest.AdditionalInfo.GetAt("QuickStreamId")
			If tQuickStreamId'="" {
				Set tQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(tQuickStreamId)
				Set tSDA3StreamRef = tQuickStream
			} Else {
				Set tSDA3StreamRef = pRequest.ContentStream
			}
			Set tSC = ..ProcessSDARequest(tSDA3StreamRef, tApplication, tSessionId, tPatientResourceId)
		} Else {
			Set tSC = $$$ERROR($$$GeneralError, "Request type not handled:  " _ pRequest.%ClassName(1)) Quit
		}
		
	} Catch eException {
		Set tSC = eException.AsStatus()
	}
	
	Quit tSC
}

Method OnInit() As %Status
{
	If ..TargetConfigName="" {
		Return $$$ERROR($$$GeneralError, "TargetConfigName not configured")
	}
	
	If ..FHIRMetadataSet="" {
		Return $$$ERROR($$$GeneralError, "FHIRMetadataSet not configured")
	}
	
	Set tRequiredBase = "HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR"
	
	If '$ClassMethod(..TransformClass, "%IsA", tRequiredBase) {
		Return $$$ERROR($$$GeneralError, "TransformClass must extend "_tRequiredBase)
	}
	
	If ..FHIRFormat="application/fhir+json" {
		Set ..FHIRFormat = "JSON"
	} Else {
		Set ..FHIRFormat = "XML"
	}
	
	Return $$$OK
}

/// This is an instance method because it needs to SendSync to a business host and get
/// the response from the host.
Method ProcessSDARequest(
	pSDAStream,
	pSessionApplication As %String,
	pSessionId As %String,
	pPatientResourceId As %String = "",
	ByRef pResponse As Ens.Response) As %Status
{
	Set tSC = $$$OK
	
	Try {
		// Check the base class for the Target business host. Determine if it is
		// a FHIRServer Interop business host or not.
		$$$ThrowOnError(##class(HS.Util.Installer.Kit.Base).GetProduction(.tProdObj))
		Set tClassName = ""
		For i = 1:1:tProdObj.Items.Count() {
			If tProdObj.Items.GetAt(i).Name = ..TargetConfigName {
				Set tClassName = tProdObj.Items.GetAt(i).ClassName
				Quit
			}
		}
		Kill tProdObj
		
		Set tIsInteropHost = 0
		Set tRequiredHostBases("HS.FHIRServer.Interop.Operation") = ""
		Set tRequiredHostBases("HS.FHIRServer.Interop.HTTPOperation") = ""
		Set tHostBase = ""
		For {
			Set tHostBase = $Order(tRequiredHostBases(tHostBase))
			If tHostBase="" Quit
			If $ClassMethod(tClassName, "%IsA", tHostBase) {
				Set tIsInteropHost = 1
				Quit
			}
		}
		
		// Get the host and web server port of the current instance, to be used for populating
		// the FHIR request message HOST header.  The HOST header is needed in the FHIR request
		// message when the message is being routed for processing in the local production, as
		// opposed to being passed to an external server.
		Do ..GetHostAndPort(.tHost, .tPort)
		Set tLocalHostAndPort = tHost_$Select(tPort'="":":",1:"")_tPort
		
		If ..FHIRFormat="JSON" {
			Set tMessageContentType = "application/fhir+json"
		} ElseIf ..FHIRFormat="XML" {
			Set tMessageContentType = "application/fhir+xml"
		}
		
		Set tFHIRMetadataSetKey = $ZStrip($Piece(..FHIRMetadataSet, "/", 1), "<>W")
		
		Set tSchema = ##class(HS.FHIRServer.Schema).LoadSchema(tFHIRMetadataSetKey)
		
		If '..FormatFHIROutput {
			Set tIndentChars = ""
			Set tLineTerminator = ""
			Set tFormatter = ""
		} Else {
			Set tIndentChars = $Char(9)
			Set tLineTerminator = $Char(13,10)
			Set tFormatter = ##class(%JSON.Formatter).%New()
			Set tFormatter.IndentChars = tIndentChars
			Set tFormatter.LineTerminator = tLineTerminator
		}
		
		#dim tTransformObj As HS.FHIR.DTL.Util.API.Transform.SDA3ToFHIR
		
		Set tTransformObj = $ClassMethod(..TransformClass, "TransformStream", pSDAStream, "HS.SDA3.Container", tFHIRMetadataSetKey, pPatientResourceId)
		
		// tTransformObj.bundle is a %DynamicObject.
		Set tBundleObj = tTransformObj.bundle
		
		$$$HSTRACE("Bundle object", "tBundleObj", tBundleObj.%ToJSON())
		
		// "individual" is not a transaction type or interaction.
		// This mode causes each entry in the Bundle to be sent
		// to TargetConfigName individually, not as a transaction.
		If ..TransmissionMode="individual" {
			For i = 0:1:tBundleObj.entry.%Size()-1 {
				If tIsInteropHost {
					Set tSC = ..CreateAndSendInteropMessage(tBundleObj.entry.%Get(i), tSchema, tMessageContentType, tFormatter, tIndentChars, tLineTerminator, pSessionApplication, pSessionId)
				} Else {
					Set tSC = ..CreateAndSendFHIRMessage(tBundleObj.entry.%Get(i), tSchema, tLocalHostAndPort, tMessageContentType, tFormatter, tIndentChars, tLineTerminator, pSessionApplication, pSessionId)
				}
			}
		} Else {
			If tIsInteropHost {
				Set tSC = ..CreateAndSendInteropMessage(tBundleObj, tSchema, tMessageContentType, tFormatter, tIndentChars, tLineTerminator, pSessionApplication, pSessionId,.pResponse)
			} Else {
				Set tSC = ..CreateAndSendFHIRMessage(tBundleObj, tSchema, tLocalHostAndPort, tMessageContentType, tFormatter, tIndentChars, tLineTerminator, pSessionApplication, pSessionId)
			}
		}
		
	} Catch eException {
		Set tSC = eException.AsStatus()
	}
	
	Quit tSC
}

ClassMethod GetHostAndPort(
	Output pHost As %String,
	Output pPort As %String)
{
	Set pHost = ""
	Set pPort = ""
	Do ##class(%RoutineMgr).GetWebServerPort(.pPort)
	Set pHost = $ZConvert($$$HSNetworkHostName, "L")
	Quit
}

/// For a given Bundle or Bundle entry, create an HS.Message.FHIR.Request object
/// and forward it to ..TargetConfigName.
Method CreateAndSendFHIRMessage(
	pFHIRObj As %Library.DynamicObject,
	pSchema As HS.FHIRServer.Schema,
	pLocalHostAndPort As %String,
	pContentType As %String,
	pFormatter As %JSON.Formatter,
	pIndentChars As %String,
	pLineTerminator As %String,
	pSessionApplication As %String,
	pSessionId As %String)
{
	Set tSC = $$$OK
	
	Try {
		Set tRequest = ##class(HS.Message.FHIR.Request).%New()
		
		If pFHIRObj.%IsDefined("resourceType") && (pFHIRObj.resourceType="Bundle") {
			// Is a Bundle.
			Set tIsBundle = 1
		} Else {
			// Is a Bundle entry.
			Set tIsBundle = 0
		}
		
		Set tRequest.ContentType = pContentType
		
		If tIsBundle {
			Set tResourceObj = pFHIRObj
			Set tRequest.Interaction = "transaction"
		} Else {
			Set tResourceObj = pFHIRObj.resource
			Set tRequest.Type = tResourceObj.resourceType
			Set tRequest.Id = tResourceObj.id
			If ($IsObject(pFHIRObj.request))&&(pFHIRObj.request.method'="") {
				If pFHIRObj.request.method="POST" {
					Set tInteraction = "create"
				} ElseIf pFHIRObj.request.method="PUT" {
					Set tInteraction = "update"
				}
			} Else {
				If tRequest.Id="" {
					Set tInteraction = "create"
				} Else {
					Set tInteraction = "update"
				}
			}
			Set tRequest.Interaction = tInteraction
		}
		
		Set tResourceStream = ..GetResourceStream(tResourceObj, ..FHIRFormat, ..FormatFHIROutput, pSchema, pFormatter, pIndentChars, pLineTerminator)
		
		If ..OutputToQuickStream {
			Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
			Set tRequest.QuickStreamId = tQuickStream.%Id()
			Do tQuickStream.CopyFrom(tResourceStream)
		} Else {
			Do tRequest.Payload.CopyFrom(tResourceStream)
		}
		
		Do:..FullTransactionResponse tRequest.Headers.SetAt("return=representation","PREFER")
		
		// Set the HOST header to provide for the case where the transaction is
		// being routed within this production (e.g., to HS.FHIR.Server.Process).
		Do tRequest.Headers.SetAt(pLocalHostAndPort, "HOST")
		Set tRequest.SessionApplication = pSessionApplication
		Set tRequest.SessionId = pSessionId
		Set tRequest.FormatFHIROutput = ..FormatFHIROutput
		
		#dim tResponse As HS.Message.FHIR.Response
		
		Set tSC = ..SendRequestSync(..TargetConfigName, tRequest, .tResponse)
		If $$$ISERR(tSC) {
			If (..OutputToQuickStream)&&($IsObject($Get(tQuickStream))) Do tQuickStream.Clear()
			If ($IsObject($Get(tResponse)))&&(tResponse.%Extends("HS.Message.FHIR.Base"))&&(tResponse.QuickStreamId'="") {
				Set tResponseQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(tResponse.QuickStreamId)
				If $IsObject(tResponseQuickStream) Do tResponseQuickStream.Clear()
				Set tResponse.QuickStreamId = ""
			}
			Quit
		}
		
		Set tSC = ..ProcessFHIRResponse(tResponse, .tFHIRStatus, pSchema)
		If (..OutputToQuickStream)&&($IsObject($Get(tQuickStream))) Do tQuickStream.Clear()
		If ($IsObject(tResponse))&&(tResponse.%Extends("HS.Message.FHIR.Base"))&&(tResponse.QuickStreamId'="") {
			Set tResponseQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(tResponse.QuickStreamId)
			If $IsObject(tResponseQuickStream) Do tResponseQuickStream.Clear()
			Set tResponse.QuickStreamId = ""
		}
		If $$$ISERR(tSC) Quit
		If $$$ISERR(tFHIRStatus) Set tSC = tFHIRStatus Quit
		
	} Catch eException {
		Set tSC = eException.AsStatus()
	}
	
	If $IsObject($Get(tQuickStream)) Do tQuickStream.Clear()
	
	Quit tSC
}

/// For a given Bundle or Bundle entry, create an HS.FHIRServer.Interop.Request object
/// and forward it to ..TargetConfigName.
Method CreateAndSendInteropMessage(
	pFHIRObj As %Library.DynamicObject,
	pSchema As HS.FHIRServer.Schema,
	pContentType As %String,
	pFormatter As %JSON.Formatter,
	pIndentChars As %String,
	pLineTerminator As %String,
	pSessionApplication As %String,
	pSessionId As %String,
	ByRef pResponse As Ens.Response)
{
	Set tSC = $$$OK
	
	Try {
		Set tRequest = ##class(HS.FHIRServer.Interop.Request).%New()
		
		If pFHIRObj.%IsDefined("resourceType") && (pFHIRObj.resourceType="Bundle") {
			// Is a Bundle.
			Set tIsBundle = 1
		} Else {
			// Is a Bundle entry.
			Set tIsBundle = 0
		}
		
		If tIsBundle {
			Set tResourceObj = pFHIRObj
			Set tRequest.Request.RequestPath = "/"
			Set tRequest.Request.RequestMethod = "POST"
		} Else {
			Set tResourceObj = pFHIRObj.resource
			Set tResourceType = tResourceObj.resourceType
			If tResourceObj.id="" {
				Set tRequest.Request.RequestPath = tResourceType
			} Else {
				Set tRequest.Request.RequestPath = tResourceType_"/"_tResourceObj.id
			}
			If ($IsObject(pFHIRObj.request))&&(pFHIRObj.request.method'="") {
				Set tMethod = pFHIRObj.request.method
			} Else {
				If tResourceObj.id="" {
					Set tMethod = "POST"
				} Else {
					Set tMethod = "PUT"
				}
			}
			Set tRequest.Request.RequestMethod = tMethod
		}
		
		Set tRequest.Request.RequestFormatCode = ..FHIRFormat
		Set tRequest.Request.ResponseFormatCode = ..FHIRFormat
		Set tRequest.Request.SessionApplication = ..FHIREndpoint
		If ..FullTransactionResponse {
			Set tRequest.Request.Prefer = "return=representation"
		}
		
		Set tResourceStream = ..GetResourceStream(tResourceObj, ..FHIRFormat, ..FormatFHIROutput, pSchema, pFormatter, pIndentChars, pLineTerminator)
		
		Set tQuickStream = ##class(HS.SDA3.QuickStream).%New()
		Set tRequest.QuickStreamId = tQuickStream.%Id()
		Do tQuickStream.CopyFrom(tResourceStream)
		
		If ..FormatFHIROutput {
			Set tRequest.Request.QueryString = "_pretty=true"
		}
		
		#dim tResponse As HS.FHIRServer.Interop.Response
		
		//Set tSC = ..SendRequestSync(..TargetConfigName, tRequest, .tResponse)
		Set tResponse = ##class(HS.FHIRServer.Interop.Response).%New()
		set tResponse.CharSet = "UTF-8"
		set tResponse.ContentType = "application/fhir+json"

		If $$$ISERR(tSC) {
			If ($IsObject($Get(tResponse)))&&(tResponse.QuickStreamId'="") {
				Set tResponseQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(tResponse.QuickStreamId)
				Set tSC = $$$ERROR($$$GeneralError, tResponseQuickStream.Read())
			}
			Quit
		}
		
	} Catch eException {
		Set tSC = eException.AsStatus()
	}
	
	//If $IsObject($Get(tQuickStream)) Do tQuickStream.Clear()
	If ($IsObject($Get(tResponse)))&&(tResponse.QuickStreamId'="") {
		Set tResponseQuickStream = ##class(HS.SDA3.QuickStream).%OpenId(tResponse.QuickStreamId)
		If $IsObject(tResponseQuickStream) Do tResponseQuickStream.Clear()
		Set tResponse.QuickStreamId = ""
	}

	set pResponse = tResponse
	set pResponse.QuickStreamId = tRequest.QuickStreamId
	
	Quit tSC
}

ClassMethod GetResourceStream(
	pResourceObj,
	pFHIRFormat,
	pFormatFHIROutput,
	pSchema,
	pFormatter,
	pIndentChars,
	pLineTerminator) As %Stream.Object
{
	Set tResourceStream = ##class(%Stream.TmpCharacter).%New()
	
	If pFHIRFormat="JSON" {
		If 'pFormatFHIROutput {
			Do pResourceObj.%ToJSON(tResourceStream)
		} Else {
			$$$ThrowOnError(pFormatter.FormatToStream(pResourceObj, tResourceStream))
		}
	} ElseIf pFHIRFormat="XML" {
		Do ##class(HS.FHIRServer.Util.JSONToXML).JSONToXML(pResourceObj, .tResourceStream, pSchema, pIndentChars, pLineTerminator)
	}
	
	Do tResourceStream.Rewind()
	
	Return tResourceStream
}

/// ProcessFHIRResponse evaluates the FHIR response message and formulates a return status code.
Method ProcessFHIRResponse(
	pFHIRResponse As HS.Message.FHIR.Response,
	ByRef pFHIRSC As %Status,
	pSchema As HS.FHIRServer.Schema) As %Status
{
	Set tSC = $$$OK
	
	Set pFHIRSC = $$$OK
	
	Try {
		// If Status is 200 OK or 201 Created or 202 Accepted, then don't
		// worry about any warnings that might be in an OperationOutcome.
		If (+pFHIRResponse.Status=200)||(+pFHIRResponse.Status=201)||(+pFHIRResponse.Status=202) Quit
		
		// The only expected Payload is an OperationOutcome resource or a Bundle of OperationOutcome resources.
		If pFHIRResponse.Payload.Size>0 {
			If pFHIRResponse.ContentType["json" {
				Set tDynObj = {}.%FromJSON(pFHIRResponse.Payload)
			} Else {
				Set tDynObj = ##class(HS.FHIRServer.Util.XMLToJSON).XMLToJSON(pFHIRResponse.Payload, pSchema)
			}
			If tDynObj.resourceType="Bundle" {
				For i = 0:1:tDynObj.entry.%Size()-1 {
					Set tEntry = tDynObj.entry.%Get(i)
					If ('$IsObject(tEntry.resource))||(tEntry.resource.resourceType'="OperationOutcome") {
						$$$ThrowStatus($$$ERROR($$$GeneralError, "Unexpected payload in FHIR response"))
					}
					For j = 0:1:tEntry.resource.issue.%Size()-1 {
						Set tIssue = tEntry.resource.issue.%Get(j)
						If tIssue.severity="error" {
							If tIssue.diagnostics'="" Set pFHIRSC = $$$ERROR($$$GeneralError, tIssue.diagnostics) Quit
						}
					}
				}
			} ElseIf tDynObj.resourceType="OperationOutcome" {
				For i = 0:1:tDynObj.issue.%Size()-1 {
					Set tIssue = tDynObj.issue.%Get(i)
					If tIssue.severity="error" {
						If tIssue.diagnostics'="" Set pFHIRSC = $$$ERROR($$$GeneralError, tIssue.diagnostics) Quit
					}
				}
			} Else {
				Set tSC = $$$ERROR($$$GeneralError, "Unexpected payload in FHIR response") Quit
			}
			Kill tDynObj
		}
		If $$$ISERR(tSC) Quit
		If $$$ISERR(pFHIRSC) Quit
		
		Set pFHIRSC = $$$ERROR($$$GeneralError, "FHIR response status = "_pFHIRResponse.Status)
		
	} Catch ex {
		Set tSC = ex.AsStatus()
	}
	
	Quit tSC
}

Storage Default
{
<Data name="ProcessDefaultData">
<Subscript>"Process"</Subscript>
<Value name="1">
<Value>TraceOperations</Value>
</Value>
<Value name="2">
<Value>TargetConfigName</Value>
</Value>
<Value name="3">
<Value>FHIRVersion</Value>
</Value>
<Value name="4">
<Value>TransmissionMode</Value>
</Value>
<Value name="5">
<Value>FullTransactionResponse</Value>
</Value>
<Value name="6">
<Value>FHIRFormat</Value>
</Value>
<Value name="7">
<Value>FormatFHIROutput</Value>
</Value>
<Value name="8">
<Value>CallbackClass</Value>
</Value>
<Value name="9">
<Value>ValidResourceRequired</Value>
</Value>
<Value name="10">
<Value>OutputToQuickStream</Value>
</Value>
<Value name="11">
<Value>TransformClass</Value>
</Value>
<Value name="12">
<Value>FHIRMetadataSet</Value>
</Value>
<Value name="13">
<Value>FHIREndpoint</Value>
</Value>
</Data>
<DefaultData>ProcessDefaultData</DefaultData>
<Type>%Storage.Persistent</Type>
}

}
